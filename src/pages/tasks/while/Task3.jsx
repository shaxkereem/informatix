import { useState } from "react";
import CodeMirror from "@uiw/react-codemirror";
import { python } from "@codemirror/lang-python";
import img2 from "../../../assets/2.png";

export default function Task3({ onSuccess }) {
  const [code, setCode] = useState("");
  const [output, setOutput] = useState("");
  const [isCorrect, setIsCorrect] = useState(false);

  const handleCheck = () => {
    if (!code.trim()) {
      setOutput("‚ö†Ô∏è –ö–æ–¥—Ç—ã –∂–∞–∑—ã“£—ã–∑.");
      setIsCorrect(false);
      return;
    }

    const normalized = code.replace(/\s/g, "");
    const isFixed = normalized.includes("i+=1") || normalized.includes("i=i+1");
    const containsWhile = code.includes("while");

    if (containsWhile && isFixed) {
      setOutput("‚úÖ –î“±—Ä—ã—Å! –ï–Ω–¥—ñ —Ü–∏–∫–ª —Ç–æ“õ—Ç–∞–π–¥—ã.");
      setIsCorrect(true);
      onSuccess?.();
    } else {
      setOutput("‚ùå –¶–∏–∫–ª ”ô–ª—ñ –¥–µ –º”ô“£–≥—ñ–ª—ñ–∫. ”®–∑–≥–µ—Ä—ñ—Å—Ç—ñ —Ç–æ–ª—ã“õ –µ–Ω–≥—ñ–∑–¥—ñ“£ –±–µ?");
      setIsCorrect(false);
    }
  };

  return (
    <div style={{ backgroundColor: "#000", color: "#FFD700", minHeight: "100vh", padding: "2rem" }}>
      <h1 style={{ fontSize: "2rem", marginBottom: "1rem" }}>üßÆ –¢–∞–ø—Å—ã—Ä–º–∞ 3</h1>
      <img src={img2} alt="–ê–π–¥–æ—Å –∫–æ–¥—Ç—ã –∂”©–Ω–¥–µ–ø –æ—Ç—ã—Ä" style={{ maxWidth: "300px", marginBottom: "1rem" }} />
      <p style={{ color: "#ccc", marginBottom: "1rem", fontSize: "1.2rem" }}>
        üë¶ <strong>–ê–π–¥–æ—Å</strong> —Ü–∏–∫–ª “õ“±—Ä–¥—ã, –±—ñ—Ä–∞“õ –æ–Ω—ã —Ç–æ“õ—Ç–∞—Ç—É —à–∞—Ä—Ç—ã–Ω “±–º—ã—Ç—ã–ø –∫–µ—Ç–∫–µ–Ω.
        –ë–∞“ì–¥–∞—Ä–ª–∞–º–∞ –º”ô“£–≥—ñ “õ–∞–π—Ç–∞–ª–∞–Ω—ã–ø –∂–∞—Ç—ã—Ä. <strong>–¶–∏–∫–ª–¥—ã –¥“±—Ä—ã—Å –∞—è“õ—Ç–∞–ª–∞—Ç—ã–Ω–¥–∞–π –µ—Ç—ñ–ø ”©–∑–≥–µ—Ä—Ç—ñ“£—ñ–∑.</strong>
      </p>
      <div style={{ backgroundColor: "#111", padding: "1rem", borderRadius: "10px", fontSize: "1rem", color: "#FFD700", marginBottom: "1rem", userSelect: "none", pointerEvents: "none" }}>
        <pre>{`# “ö–∞—Ç–µ –∫–æ–¥\ni = 1\nwhile i < 10:\n    print(i)`}</pre>
      </div>
      <CodeMirror
        value={code}
        height="200px"
        extensions={[python()]}
        onChange={(val) => setCode(val)}
        theme="dark"
        style={{ marginBottom: "1rem", fontSize: "1rem" }}
      />
      <button onClick={handleCheck} style={buttonStyle}>üì§ –¢–µ–∫—Å–µ—Ä—É</button>
      <div style={{ marginTop: "1rem", fontSize: "1.1rem", color: isCorrect ? "#0f0" : "#f33" }}>
        {output || "üì• –ù”ô—Ç–∏–∂–µ –æ—Å—ã–Ω–¥–∞ —à—ã“ì–∞–¥—ã"}
      </div>
    </div>
  );
}

const buttonStyle = {
  backgroundColor: "#FFD700",
  color: "#000",
  padding: "0.6rem 1.5rem",
  fontWeight: "bold",
  fontSize: "1rem",
  borderRadius: "10px",
  border: "none",
  cursor: "pointer"
};
