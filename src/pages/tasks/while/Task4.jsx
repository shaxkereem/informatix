import { useState } from "react";
import { useNavigate } from "react-router-dom";
import CodeMirror from "@uiw/react-codemirror";
import { python } from "@codemirror/lang-python";
import img4 from "../../../assets/4.png";

export default function Task4({ onSuccess }) {
  const [code, setCode] = useState("");
  const [output, setOutput] = useState("");
  const [isCorrect, setIsCorrect] = useState(false);
  const navigate = useNavigate();

  const handleCheck = () => {
    if (!code.trim()) {
      setOutput("‚ö†Ô∏è –ö–æ–¥—Ç—ã –∂–∞–∑—ã“£—ã–∑.");
      setIsCorrect(false);
      return;
    }

    const normalized = code.replace(/\s/g, "");
    const hasSquare = normalized.includes("**2") || normalized.includes("*i*i") || normalized.includes("i**2");
    const usesWhile = code.includes("while");

    if (hasSquare && usesWhile) {
      setOutput("‚úÖ –î“±—Ä—ã—Å! –ë–∞—Ä–ª—ã“õ –∫–≤–∞–¥—Ä–∞—Ç —Å–∞–Ω–¥–∞—Ä —Ç–∞–±—ã–ª–¥—ã.");
      setIsCorrect(true);
      onSuccess?.();
    } else {
      setOutput("‚ùå –ö–≤–∞–¥—Ä–∞—Ç —Å–∞–Ω–¥–∞—Ä “Ø—à—ñ–Ω **2 “õ–æ–ª–¥–∞–Ω—ã–ª—É—ã —Ç–∏—ñ—Å –∂”ô–Ω–µ while —Ü–∏–∫–ª—ñ “õ–∞–∂–µ—Ç.");
      setIsCorrect(false);
    }
  };

  const handleNext = () => {
    navigate("/grade8/while/5");
  };

  return (
    <div style={{ backgroundColor: "#000", color: "#FFD700", minHeight: "100vh", padding: "2rem" }}>
      <h1 style={{ fontSize: "2rem", marginBottom: "1rem" }}>üßÆ –¢–∞–ø—Å—ã—Ä–º–∞ 4</h1>
      <img src={img4} alt="–ê–π–¥–æ—Å –∫–≤–∞–¥—Ä–∞—Ç —Å–∞–Ω–¥–∞—Ä–¥—ã –µ—Å–µ–ø—Ç–µ–ø –æ—Ç—ã—Ä" style={{ maxWidth: "300px", marginBottom: "1rem" }} />
      <p style={{ color: "#ccc", marginBottom: "1rem", fontSize: "1.2rem" }}>
        üë¶ <strong>–ê–π–¥–æ—Å</strong> N —Å–∞–Ω—ã–Ω–∞ –¥–µ–π—ñ–Ω–≥—ñ –±–∞—Ä–ª—ã“õ —Ç–∞“õ —Å–∞–Ω–¥–∞—Ä–¥—ã“£ <strong>–∫–≤–∞–¥—Ä–∞—Ç—Ç–∞—Ä—ã–Ω</strong> —Ç–∞–±—É—ã –∫–µ—Ä–µ–∫.
        <br />–ö–æ–¥—Ç—ã –∂–∞–∑—ã“£—ã–∑ –∂”ô–Ω–µ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.
      </p>
      <div style={{ backgroundColor: "#111", padding: "1rem", borderRadius: "10px", fontSize: "1rem", color: "#FFD700", marginBottom: "1rem", userSelect: "none", pointerEvents: "none" }}>
        <pre>{`# –ú—ã—Å–∞–ª –∫—ñ—Ä—ñ—Å: N = 50\n# –ö“Ø—Ç—ñ–ª–µ—Ç—ñ–Ω —à—ã“ì—ã—Å: 1 9 25 49`}</pre>
      </div>
      <CodeMirror
        value={code}
        height="200px"
        extensions={[python()]}
        onChange={(val) => setCode(val)}
        theme="dark"
        style={{ marginBottom: "1rem", fontSize: "1rem" }}
      />
      <button onClick={handleCheck} style={buttonStyle}>üì§ –¢–µ–∫—Å–µ—Ä—É</button>
      <div style={{ marginTop: "1rem", fontSize: "1.1rem", color: isCorrect ? "#0f0" : "#f33" }}>
        {output || "üì• –ù”ô—Ç–∏–∂–µ –æ—Å—ã–Ω–¥–∞ —à—ã“ì–∞–¥—ã"}
      </div>
      <div style={{ textAlign: "center", marginTop: "2rem" }}>
        <button
          onClick={handleNext}
          style={{
            backgroundColor: isCorrect ? "#FFD700" : "#333",
            color: isCorrect ? "#000" : "#FFD700",
            padding: "0.75rem 1.5rem",
            borderRadius: "10px",
            fontWeight: "bold",
            fontSize: "1rem",
            border: isCorrect ? "none" : "1px dashed #FFD700",
            cursor: "pointer"
          }}
        >
          ‚û°Ô∏è {isCorrect ? "–ö–µ–ª–µ—Å—ñ —Ç–∞–ø—Å—ã—Ä–º–∞" : "”®—Ç–∫—ñ–∑—ñ–ø –∂—ñ–±–µ—Ä—É"}
        </button>
      </div>
    </div>
  );
}

const buttonStyle = {
  backgroundColor: "#FFD700",
  color: "#000",
  padding: "0.6rem 1.5rem",
  fontWeight: "bold",
  fontSize: "1rem",
  borderRadius: "10px",
  border: "none",
  cursor: "pointer"
};